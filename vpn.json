{
   "ip"           :"172.16.240.18",
   "dominio"      :"vpn.atlantica.do/VPN_STL_DEV2",
   "dominio2"     :"vn.statetrust.com/VPN_STL_DEV1",
   "Pass"         :"Welcome@3348600",
   "PassToken"    :"Statetrust2019+token",	
   "grant_type"   : "client_credentials",
   "client_id"    : "a16948768d8e40e38372f8a0043c7bf5",
   "client_secret": "db499fbb299c451aa1ef6cccdcd560d6",
   "url"          : "https://accounts.spotify.com/api/token"
}

 


USE [DBPRESTAMO]
GO
/****** Object:  StoredProcedure [dbo].[SP_GET_CREATE_TABLE_C#]    Script Date: 7/6/2022 10:44:09 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
 

ALTER PROC [dbo].[SP_GET_CREATE_TABLE_C#] --'BranchOffice'
@Tabla varchar(50)
as

declare @TableName sysname = @Tabla
declare @Result varchar(max) = 'public class ' + @TableName + '
{'

select @Result = @Result + '
       public ' + ColumnType + NullableSign + ' ' + lower(ColumnName) + ' { get; set; }
'
from
(
       select 
           replace(col.name, ' ', '_') ColumnName,
           column_id ColumnId,
           case typ.name 
               when 'bigint' then 'long'
               when 'binary' then 'byte[]'
               when 'bit' then 'bool'
               when 'char' then 'string'
               when 'date' then 'DateTime'
               when 'datetime' then 'DateTime'
               when 'datetime2' then 'DateTime'
               when 'datetimeoffset' then 'DateTimeOffset'
               when 'decimal' then 'decimal'
               when 'float' then 'float'
               when 'image' then 'byte[]'
               when 'int' then 'int'
               when 'money' then 'decimal'
               when 'nchar' then 'string'
               when 'ntext' then 'string'
               when 'numeric' then 'decimal'
               when 'nvarchar' then 'string'
               when 'real' then 'double'
               when 'smalldatetime' then 'DateTime'
               when 'smallint' then 'short'
               when 'smallmoney' then 'decimal'
               when 'text' then 'string'
               when 'time' then 'TimeSpan'
               when 'timestamp' then 'DateTime'
               when 'tinyint' then 'byte'
               when 'uniqueidentifier' then 'Guid'
               when 'varbinary' then 'byte[]'
               when 'varchar' then 'string'
               else 'UNKNOWN_' + typ.name
           end ColumnType,
           case 
               when col.is_nullable = 1 and typ.name in ('bigint', 'bit', 'date', 'datetime', 'datetime2', 'datetimeoffset', 'decimal', 'float', 'int', 'money', 'numeric', 'real', 'smalldatetime', 'smallint', 'smallmoney', 'time', 'tinyint', 'uniqueidentifier') 
               then '?' 
               else '' 
           end NullableSign
       from sys.columns col
           join sys.types typ on
               col.system_type_id = typ.system_type_id AND col.user_type_id = typ.user_type_id
       where object_id = object_id(@TableName)
) t
order by ColumnId

set @Result = @Result  + '
}'

print @Result



USE [Documentation_Jobs]
GO

/****** Object:  Table [dbo].[JobActivityMonitorDBA]    Script Date: 8/15/2022 12:35:37 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[JobActivityMonitorDBA](
	[id] [uniqueidentifier] NULL,
	[Servern_Name] [varchar](150) NULL,
	[Job_Name] [varchar](150) NULL,
	[Owner] [varchar](150) NULL,
	[Job_Status] [varchar](150) NULL,
	[Last_Run_Status] [varchar](150) NULL,
	[Last_Run_Time] [varchar](150) NULL,
	[Next_Run_Time] [varchar](150) NULL,
	[Description] [varchar](255) NULL,
	[Create_Date] [datetime] NULL
) ON [PRIMARY]
GO



Use SQL_IMPORT_TOOLS ;
CREATE PROCEDURE [dbo].[crud_JobActivityMonitorDBA]
 @id int=null
,@Servern_Name varchar(150)=null
,@Job_Name varchar(150)=null
,@Owner varchar(150)=null
,@Job_Status varchar(150)=null
,@Last_Run_Status varchar(150)=null
,@Last_Run_Time varchar(150)=null
,@Next_Run_Time varchar(150)=null
,@Description varchar(255)=null
,@Create_Date datetime=null

/************************************************************************************
Autor				: Robert Ulloa
Proposito			: Insertar o actualizar JobActivityMonitorDBA
*************************************************************************************
Entrada:
       @id int              =
@Servern_Name varchar              =
@Job_Name varchar              =
@Owner varchar              =
@Job_Status varchar              =
@Last_Run_Status varchar              =
@Last_Run_Time varchar              =
@Next_Run_Time varchar              =
@Description varchar              =
@Create_Date datetime              =

Dependencias:
    Tablas:
            JobActivityMonitorDBA
Version		: 1.0
Implementacion:
    1.0:
        - Declaracion de tabla temporal.
        - Sincroniza tabla destino con datos en tabla origen.
        - Actualiza registro si existe.
        - Inserta nuevo registro si no existe.
        - Respuesta de resultados.
Historico de revision:
    1.0 - Aug/15/2022	Robert Ulloa
        Creacion de Objeto.
* ***********************************************************************************/
AS
set nocount on
BEGIN
--Declaracion de tabla temporal. --
declare @result table
(
[action] varchar(50),
[id] int
)
-- Sincroniza tabla destino con datos en tabla origen. --
MERGE [dbo].[JobActivityMonitorDBA] t
USING (SELECT @id, @Servern_Name, @Job_Name, @Owner, @Job_Status, @Last_Run_Status, @Last_Run_Time, @Next_Run_Time, @Description, @Create_Date) s
              (id, Servern_Name, Job_Name, Owner, Job_Status, Last_Run_Status, Last_Run_Time, Next_Run_Time, Description, Create_Date)
ON (t.id = s.id)

--Actualiza registro si existe. --
WHEN MATCHED THEN
UPDATE
SET
    t.[Servern_Name] = isnull(s.[Servern_Name],t.[Servern_Name]),
t.[Job_Name] = isnull(s.[Job_Name],t.[Job_Name]),
t.[Owner] = isnull(s.[Owner],t.[Owner]),
t.[Job_Status] = isnull(s.[Job_Status],t.[Job_Status]),
t.[Last_Run_Status] = isnull(s.[Last_Run_Status],t.[Last_Run_Status]),
t.[Last_Run_Time] = isnull(s.[Last_Run_Time],t.[Last_Run_Time]),
t.[Next_Run_Time] = isnull(s.[Next_Run_Time],t.[Next_Run_Time]),
t.[Description] = isnull(s.[Description],t.[Description]),
t.[Create_Date] = isnull(s.[Create_Date],t.[Create_Date])

-- Inserta nuevo registro si no existe. --
WHEN NOT MATCHED THEN
INSERT
      (
       Servern_Name,
Job_Name,
Owner,
Job_Status,
Last_Run_Status,
Last_Run_Time,
Next_Run_Time,
Description,
Create_Date

      )
      VALUES
      (
        s.Servern_Name,
s.Job_Name,
s.Owner,
s.Job_Status,
s.Last_Run_Status,
s.Last_Run_Time,
s.Next_Run_Time,
s.Description,
s.Create_Date
)
--Respuesta de resultados. --
output $action,isnull(deleted.[id],inserted.[id]) into @result;
select * from @result
 END
 ;

/****** Object:  View [dbo].[VISTA_VANEIKER]    Script Date: 8/28/2022 1:58:20 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


ALTER VIEW [dbo].[VISTA_VANEIKER]

as





WITH ob
AS (
       SELECT pv.idCase
              ,pv.Sequence
              ,pv.codigoCore AgentCode
              ,pv.GlobalAgentId
              ,Agent_Full_Name = REPLACE(REPLACE(REPLACE(isnull(pv.FirstName, '') + ' ' + isnull([SecondName], '') + ' ' + isnull(pv.FirstLastName, ''), ' ', '*^'), '^*', ''), '*^', ' ')
              ,y.Name [LineaNegocio]
              ,pv.IdentificationNumber
              ,pv.ProvinceStateAddress
              ,Z.Code CodigoProvincia
              ,Z.Name Provincia
              ,pv.CityId
              ,x.Code CodigoCiudad
              ,x.Name Ciudad
       FROM (
              SELECT a.IdCase
                     ,b.ColumnName
                     ,CASE 
                           WHEN b.IdFieldType = 1
                                  THEN convert(VARCHAR(50), isnull(ltrim(rtrim(replace(replace(replace(a.DatoStr, CHAR(9), ''), CHAR(10), ''), CHAR(13), ''))), ''))
                           WHEN b.IdFieldType = 2
                                  THEN cast(a.DatoNum AS VARCHAR(50))
                           WHEN b.IdFieldType = 3
                                  THEN cast(a.DatoInt AS VARCHAR(50))
                           WHEN b.IdFieldType = 4
                                  THEN convert(VARCHAR(50), a.DatoDat, 112)
                           WHEN b.IdFieldType = 5
                                  THEN cast(a.Code AS VARCHAR(50))
                           WHEN b.IdFieldType = 6
                                  THEN cast(a.DatoBit AS VARCHAR(50))
                           ELSE convert(VARCHAR(50), isnull(ltrim(rtrim(replace(replace(replace(a.DatoStr, CHAR(9), ''), CHAR(10), ''), CHAR(13), ''))), ''))
                           END [value]
                     ,a.Sequence
              FROM [OnboardingAgent].[DataManager].[CaseData] a
              JOIN [OnboardingAgent].[DataManager].[Field] b ON a.idField = b.id
              WHERE a.Active = 1
                     AND a.IsDeleted = 0
                     AND ColumnName IN (
                           'codigoCore'
                           ,'GlobalAgentId'
                           ,'FirstName'
                           ,'SecondName'
                           ,'FirstLastName'
                           ,'businessLineCode'
                           ,'IdentificationNumber'
                           ,'IdentificaciontNumberGP'
                           ,'ProvinceStateAddress'
                           ,'CityId'
                           )
              ) fields
       pivot(max([value]) FOR ColumnName IN (
                           [codigoCore]
                           ,[GlobalAgentId]
                           ,[FirstName]
                           ,[SecondName]
                           ,[FirstLastName]
                           ,[businessLineCode]
                           ,[IdentificationNumber]
                           ,[ProvinceStateAddress]
                           ,[CityId]
                           )) pv
       LEFT JOIN [OnboardingAgent].[DataManager].[CatalogData] x ON pv.[CityId] = x.Code
              AND x.Active = 1
              AND x.IsDeleted = 0
       LEFT JOIN [OnboardingAgent].[DataManager].[CatalogData] y ON pv.businessLineCode = y.Code
              AND Y.Active = 1
              AND Y.IsDeleted = 0
       LEFT JOIN [OnboardingAgent].[DataManager].[CatalogData] Z ON pv.ProvinceStateAddress = Z.Code
              AND Z.Active = 1
              AND Z.IsDeleted = 0
       WHERE y.Name = 'AUTOMOVIL'
       )
       ,vo
AS (
       SELECT Agent_Id
              ,Residence_Country_Id
              ,Citizenship_Country_Id
              ,b.State_Prov_Desc
              ,C.Code
       FROM GLOBAL.Entity.EN_AGENT a
       JOIN GLOBAL.[Global].[ST_GLOBAL_STATE_PROVINCE] b ON a.Residence_Country_Id = b.Country_Id
              AND a.Citizenship_Country_Id = b.State_Prov_Id
       LEFT JOIN [OnboardingAgent].[DataManager].[CatalogData] C ON IdCatalogHeader = 2
              AND ParentCode = 'COU0129'
              AND b.State_Prov_Desc = C.Name
       WHERE a.Citizenship_Country_Id <> 0
       )
       ,cartera
AS (
       SELECT iif(c.SYSTEM_ID = 1, convert(VARCHAR, try_cast(b.[CODIGO INTERMEDIARIO] AS INT)), b.[CODIGO INTERMEDIARIO]) [CODIGO INTERMEDIARIO]
              ,b.[NOMBRE INTERMEDIARIO]
              ,b.[ESTADO INTERMEDIARIO]
              ,SUM(a.ACCOUNT_VALUE) CARTERA
       FROM [ATL-SRV67.ATLANTICA.DO].[Reportdw].[REPORT].[vw_detalle_cartera_actual_extendida] a
       JOIN [ATL-SRV67.ATLANTICA.DO].[Reportdw].REPORT.DM_D_SALES_HIERARCHY b ON a.POLICY_AGENT_ID = b.[ID INTERMEDIARIO]
       JOIN [ATL-SRV67.ATLANTICA.DO].[Reportdw].DTW.DM_D_AGENT c ON b.[ID INTERMEDIARIO] = c.AGENT_ID
              AND c.system_id = 1
       GROUP BY iif(c.SYSTEM_ID = 1, convert(VARCHAR, try_cast(b.[CODIGO INTERMEDIARIO] AS INT)), b.[CODIGO INTERMEDIARIO])
              ,b.[NOMBRE INTERMEDIARIO]
              ,b.[ESTADO INTERMEDIARIO]
       )
SELECT *
FROM ob x
JOIN vo Y ON x.GlobalAgentId = Y.Agent_Id
LEFT JOIN cartera z ON x.AgentCode = z.[CODIGO INTERMEDIARIO]
WHERE x.CodigoProvincia IS NULL
 

GO



USE [Logs]
GO
/****** Object:  StoredProcedure [dbo].[CLEAN_LOG_DAY]    Script Date: 9/2/2022 9:02:07 AM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		Rabel Obispo
-- Create date: 2017-07-14
-- Description:	Clean log day
-- =============================================
ALTER PROCEDURE [dbo].[CLEAN_LOG_DAY]
AS
BEGIN
	SET NOCOUNT ON;
	declare @Table table([Id] int identity(1,1), [TableToInsert] varchar(500),[TableToSearch] varchar(500), [ColumnName] varchar(60))
	declare @CurrentDate datetime
	declare @CurrentDateV varchar(100)
	declare @Count int;
	declare @Counter int;
	declare @QueryInsert nvarchar(max)
	declare @QueryDelete nvarchar(max)
	declare @QueryDrop nvarchar(max)
	declare @TableToInsert varchar(500)
	declare @TableToSearch varchar(500)
	declare @ColumnName varchar(60)
	declare @ParmDefinition nvarchar(max)
		
	set @CurrentDate = getdate();
	set @CurrentDateV = replace(replace(replace(convert(varchar(100),@CurrentDate,127),'-',''),':',''),'.','');
	set @Count = -1;
	set @Counter = 1;
	set @ParmDefinition = '@CurrentDate datetime'

	insert into @Table([TableToInsert],[TableToSearch],[ColumnName])
		select
			 concat('[dbo].[',replace(replace([Table_Name],'[',''),']',''),'_',@CurrentDateV,']') as [TableToInsert]
			,concat(iif(isnull([Linked_Server],'')<>'',concat([Linked_Server],'.'),''),[Data_Base],'.',[Table_Schema],'.',[Table_Name]) as [Full_Name]
			,[Column_Name]
		from
			[dbo].[Clean_Config]
		where 
			[Table_Status] = 1;

	set @Count = isnull((select count(*) from @Table),-1);

	while @Counter <= @Count
	begin
		begin try
			select top 1
				 @TableToInsert = [TableToInsert]
				,@TableToSearch = [TableToSearch]
				,@ColumnName = [ColumnName]
			from
				@Table
			where 
				[Id] = @Counter;

			set @QueryInsert = concat('select * into ',@TableToInsert,' from ',@TableToSearch,' where ',@ColumnName,' <= @CurrentDate;');
			set @QueryDelete = concat('delete from ',@TableToSearch,' where ',@ColumnName,' <= @CurrentDate;');
			set @QueryDrop  = concat('if not exists (select top 1 1 from ',@TableToInsert,') begin drop table ',@TableToInsert,'; end');

			exec sp_executesql @QueryInsert, @ParmDefinition, @CurrentDate = @CurrentDate;
			exec sp_executesql @QueryDelete, @ParmDefinition, @CurrentDate = @CurrentDate; 
			exec sp_executesql @QueryDrop;
		end try
		begin catch
			declare @TableError table([Message] varchar(max))
			insert into @TableError
				select 
					'ErrorNumber:' + CHAR(10)
					+ CHAR(9) + convert(varchar(4000),ERROR_NUMBER()) + CHAR(10)
					+ 'ErrorSeverity:' + CHAR(10)
					+ CHAR(9) + convert(varchar(4000),ERROR_SEVERITY()) + CHAR(10)
					+ 'ErrorState:' + CHAR(10)
					+ CHAR(9) + convert(varchar(4000),ERROR_STATE()) + CHAR(10)
					+ 'ErrorLine:' + CHAR(10)
					+ CHAR(9) + convert(varchar(4000),ERROR_LINE ()) + CHAR(10)
					+ 'ErrorProcedure:' + CHAR(10)
					+ CHAR(9) + convert(varchar(4000),ERROR_PROCEDURE()) + CHAR(10)
					+ 'ErrorMessage:' + CHAR(10)
					+ CHAR(9) + convert(varchar(4000),ERROR_MESSAGE())

			insert into [dbo].[Log_Config]
				([Type],[Log_Value])
			values
				('Error',(select * from @TableError FOR XML AUTO));
		end catch

		set @Counter = @Counter + 1;
	end

END




USE [Logs]
GO

/****** Object:  Table [dbo].[Clean_Config]    Script Date: 9/2/2022 9:10:14 AM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Clean_Config](
	[Id] [int] NOT NULL,
	[Linked_Server] [varchar](60) NULL,
	[Data_Base] [varchar](60) NOT NULL,
	[Table_Schema] [varchar](60) NOT NULL,
	[Table_Name] [varchar](150) NOT NULL,
	[Column_Name] [varchar](60) NOT NULL,
	[Table_Status] [bit] NOT NULL,
	[Create_Date] [datetime] NOT NULL,
	[Create_UsrId] [int] NOT NULL,
	[Modi_Date] [datetime] NULL,
	[Modi_UsrId] [int] NULL,
	[Hostname] [varchar](100) NOT NULL,
 CONSTRAINT [PK_Clean_Config] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Clean_Config] ADD  CONSTRAINT [DF_Clean_Config_Status]  DEFAULT ((1)) FOR [Table_Status]
GO

ALTER TABLE [dbo].[Clean_Config] ADD  CONSTRAINT [DF_Clean_Config_Create_Date]  DEFAULT (getdate()) FOR [Create_Date]
GO

ALTER TABLE [dbo].[Clean_Config] ADD  CONSTRAINT [DF_Clean_Config_Hostname]  DEFAULT (host_name()) FOR [Hostname]
GO

 
        public void ExportToExcel()
        {
            var metodo = new MetodoLogic();
            var emplist = metodo.GET_USUARIO_NUEVOS_Log();


            ExcelPackage pck = new ExcelPackage();
            ExcelWorksheet ws = pck.Workbook.Worksheets.Add("Report");

            ws.Cells["A1"].Value = "Creación de Usuarios";
            //ws.Cells["B1"].Value = "Com1";

            ws.Cells["A2"].Value = "Report";
            ws.Cells["B2"].Value = "Report1";

            ws.Cells["A3"].Value = "Date";
            ws.Cells["B3"].Value = string.Format("{0:dd MMMM yyyy} at {0:H: mm tt}", DateTimeOffset.Now);

            ws.Cells["A6"].Value = "Usuario ID";
            ws.Cells["B6"].Value = "Agent ID";
            ws.Cells["C6"].Value = "Agent Code";
            ws.Cells["D6"].Value = "Usuario";
            ws.Cells["E6"].Value = "Nombre Completo";

            int rowStart = 7;
            foreach (var item in emplist)
            {
                if (item.Id_Usuario < 5)
                {
                    ws.Row(rowStart).Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    ws.Row(rowStart).Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(string.Format("pink")));

                }

                ws.Cells[string.Format("A{0}", rowStart)].Value = item.Id_Usuario;
                ws.Cells[string.Format("B{0}", rowStart)].Value = item.Agent_ID;
                ws.Cells[string.Format("C{0}", rowStart)].Value = item.Agent_Code;
                ws.Cells[string.Format("D{0}", rowStart)].Value = item.Usuario;
                ws.Cells[string.Format("E{0}", rowStart)].Value = item.Nombre_Completo;
                rowStart++;
            }

            ws.Cells["A:AZ"].AutoFitColumns();
            Response.Clear();
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment: filename=" + "ExcelReport.xlsx");
            Response.BinaryWrite(pck.GetAsByteArray());
            Response.End();

        }
      
        

