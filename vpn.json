 <td class="text-center" width="1%">
                                        <div class="btn-group" role="group" aria-label="Basic example">
                                            <a  class="btn btn-outline-secondary btn-sm" onclick="validationDocument("1")" disabled="disabled">
                                                <i class="fas fa-ban"></i>
                                                View Document
                                            </a>
                                            <a  class="btn btn-outline-secondary btn-sm"  disabled="disabled">
                                                <i class="fas fa-ban"></i>
                                                Edit
                                            </a>

                                        </div>
                                    </td>


{


    "ip": "172.16.240.18",
    "dominio":   "vpn.atlantica.do",
    "Pass":      "Quebonitavecinda21",
    "PassToken": "Statetrust2019 +token",

	
    "grant_type": "client_credentials",
    "client_id": "a16948768d8e40e38372f8a0043c7bf5",
    "client_secret": "db499fbb299c451aa1ef6cccdcd560d6",
    "url": "https://accounts.spotify.com/api/token"
}, 



----Desencriptar password
----'My$ecret|<ey' 

--EncryptByPassPhrase 
select convert(varchar(100),DecryptByPassPhrase('My$ecret|<ey',passwordEncrypted)),*
from dbo.credentials; 


select convert(varchar(100),DecryptByPassPhrase('My$ecret|<ey',passwordEncrypted)),*
from dbo.credentials
where name like '%StVoMigracion%'




 <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <label for="dropAssignProspect">Asignar a:</label>
                                    @Html.DropDownList("dropAssignProspect", new SelectList(Model.PeopleBook, "Key", "Value"), "Seleccionar", new { @Id = "dropAssignProspect", @class = "dropdown-control form-control tocleanDrop" })
                                </div>
                            </div>


https://webexadm.statetrust.com/webappng/sites/conference/meeting/info/b34209a405ce0f1fa71ced6185c9ce418c87f48cea81e8e460d75c0f7c00ca12?siteurl=conference&rnd=0.5185476001998612

USE msdb
SELECT * FROM (
SELECT
[Job_Name] = j.name
,[Last_Run_Time] = CASE
WHEN js.last_run_date > 0 THEN substring(convert(varchar(8),js.last_run_date),1,4) +'-'+ substring(convert(varchar(8),js.last_run_date),5,2) +'-'+ substring(convert(varchar(8),js.last_run_date),7,2) +' '+
CASE len(js.last_run_time)
WHEN 6 THEN substring(convert(varchar(8),js.last_run_time),1,2) +':'+ substring(convert(varchar(8),js.last_run_time),3,2) +':'+ substring(convert(varchar(8),js.last_run_time),5,2)
WHEN 5 THEN +'0'+ substring(convert(varchar(8),js.last_run_time),1,1) +':'+ substring(convert(varchar(8),js.last_run_time),2,2) +':'+ substring(convert(varchar(8),js.last_run_time),4,2)
WHEN 4 THEN +'00:'+ substring(convert(varchar(8),js.last_run_time),1,2) +':'+ substring(convert(varchar(8),js.last_run_time),3,2)
WHEN 3 THEN +'00:0'+ substring(convert(varchar(8),js.last_run_time),1,1) +':'+ substring(convert(varchar(8),js.last_run_time),2,2)
WHEN 2 THEN +'00:00:'+ substring(convert(varchar(8),js.last_run_time),1,2)
WHEN 1 THEN +'00:00:0'+ substring(convert(varchar(8),js.last_run_time),1,1)
END
ELSE 'Never Executed'
END
--,[Drop_Statement] = 'sp_delete_job @job_name = ' + '''' + j.name + ''''
FROM sysjobs j
INNER JOIN sysjobservers js on j.job_id = js.job_id
)as ttable
WHERE [Last_Run_Time] < (SELECT convert(varchar, getdate()-365, 121))
ORDER BY [Last_Run_Time]
--Después de crear este script, me decidí a crear otro que mostrara toda la actividad realizada por los jobs, como si se tratase del Job Activity Monitor
--Este es el otro Script:
/*--------------------------------------------------------------------------------------
-- Title: Actividad de Jobs Detallada
-- Author: Fran Lens (http://www.lensql.net)
-- Date: 2012-02-15
-- Description: Esta consulta devuelve información de la ejecuciones de los jobs, es parecido al Job Activity Monitor
--------------------------------------------------------------------------------------*/
USE msdb
SELECT * FROM (
SELECT
[Job_Name] = j.name
,[Owner] = sp.name
,[Job_Status] = CASE
 WHEN j.enabled = 1 THEN 'Enabled'
 ELSE 'Disabled'
 END
,[Last_Run_Status] = CASE js.last_run_outcome
 WHEN 0 THEN 'Failed'
 WHEN 1 THEN 'Succeeded'
 WHEN 3 THEN 'Cancelled'
 WHEN 4 THEN 'In Progress'
 WHEN 5 THEN 'Unknown'
 END
,[Last_Run_Time] = CASE
 WHEN js.last_run_date > 0 THEN substring(convert(varchar(8),js.last_run_date),1,4) +'-'+ substring(convert(varchar(8),js.last_run_date),5,2) +'-'+ substring(convert(varchar(8),js.last_run_date),7,2) +' '+
 CASE len(js.last_run_time)
 WHEN 6 THEN substring(convert(varchar(8),js.last_run_time),1,2) +':'+ substring(convert(varchar(8),js.last_run_time),3,2) +':'+ substring(convert(varchar(8),js.last_run_time),5,2)
 WHEN 5 THEN +'0'+ substring(convert(varchar(8),js.last_run_time),1,1) +':'+ substring(convert(varchar(8),js.last_run_time),2,2) +':'+ substring(convert(varchar(8),js.last_run_time),4,2)
 WHEN 4 THEN +'00:'+ substring(convert(varchar(8),js.last_run_time),1,2) +':'+ substring(convert(varchar(8),js.last_run_time),3,2)
 WHEN 3 THEN +'00:0'+ substring(convert(varchar(8),js.last_run_time),1,1) +':'+ substring(convert(varchar(8),js.last_run_time),2,2)
 WHEN 2 THEN +'00:00:'+ substring(convert(varchar(8),js.last_run_time),1,2)
 WHEN 1 THEN +'00:00:0'+ substring(convert(varchar(8),js.last_run_time),1,1)
 END
 ELSE 'Never Executed'
 END
,[Next_Run_Time] = CASE
 WHEN ja.next_scheduled_run_date > 0 THEN convert(varchar(19),ja.next_scheduled_run_date,121)
 ELSE 'Not Scheduled'
 END
,[Description] = j.description
--,[Drop_Statement] = 'sp_delete_job @job_name = ' + '''' + j.name + ''''
FROM sysjobs j
INNER JOIN sysjobservers js on j.job_id = js.job_id
INNER JOIN sysjobactivity ja on j.job_id = ja.job_id
INNER JOIN sys.server_principals sp on j.owner_sid = sp.sid
WHERE js.last_run_outcome=0 and j.enabled = 1 and ja.next_scheduled_run_date > 0 and ja.session_id = (SELECT MAX(session_id) from msdb.dbo.sysjobactivity)
)as ttable
ORDER BY [Last_Run_Time] 






using Data.EF_MODEL;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Data
{
    public class DataCurrencyVariation
    {
        public IEnumerable<CurrencyEntryEntity> SP_GET_CurrencyListDatas()
        {
            try
            {
                using (var dbo = new CurrencyVariationEntities())
                {
                    IEnumerable<CurrencyEntryEntity> RetornarValue = dbo.Database.SqlQuery<CurrencyEntryEntity>("EXEC SP_GET_CurrencyList"

                        ).ToList();
                    return RetornarValue.ToArray();
                }
            }
            catch (Exception ex)
            {
                throw;
            }

        }
        public CurrencyEntryEntity GET_One_CurrencyListDatas(int id)
        {
            try
            {
                using (var dbo = new CurrencyVariationEntities())
                {
                    IEnumerable<CurrencyEntryEntity> RetornarValue = dbo.Database.SqlQuery<CurrencyEntryEntity>("EXEC SP_GET_ONE_Currency @IdCurrencyEntry",
                        new SqlParameter("@IdCurrencyEntry", id)).ToList();
                    return RetornarValue.FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        } 
        public Generic SET_MAINTENANCE_CURRENCYENTRY(CurrencyEntryEntity parameter)
        {
            var result = new Generic();
            try
            {
                using (var dbo = new CurrencyVariationEntities())
                {
                    IEnumerable<Generic> RetornarValue = dbo.Database.SqlQuery<Generic>("EXEC SP_SET_MAINTENANCE_CURRENCYENTRY @IdCurrencyEntry,@DateCurrencyEntry,@Hedge_Value,@Beginning_Rate,@End_Rate,@CreateUserid",
                        new SqlParameter("@IdCurrencyEntry", parameter.IdCurrencyEntry),
                        new SqlParameter("@DateCurrencyEntry", parameter.DateCurrencyEntry),
                        new SqlParameter("@Hedge_Value", parameter.Hedge_Value),
                        new SqlParameter("@Beginning_Rate ", parameter.Beginning_Rate),
                        new SqlParameter("@End_Rate", parameter.End_Rate),
                        new SqlParameter("@CreateUserid", parameter.CreateUserid)
                  
                        ).ToList();  
                    return RetornarValue.FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                result.Valor = ex.Message.ToString();
                return result; 
            } 
        } 
        public PdfBinaryEntity GetPdfBin(int id = 0)
        {
            var result = new PdfBinaryEntity();
            using (var db = new CurrencyVariationEntities())
            {
                result = db.PdfBinaries.Where(x => x.IdCase == id).Select(x => new PdfBinaryEntity
                {
                    IdCase = x.IdCase,
                    PdfBinary1 = x.PdfBinary1
                }).FirstOrDefault();

                return result;
            }
        }

        public void SetPdfMantanam(PdfBinaryEntity parameters)
        {
            using (var db = new CurrencyVariationEntities())
            {
                using (var cmd = db.Database.Connection.CreateCommand())

                {
                    db.Database.Connection.Open();
                    cmd.CommandText = "SP_INSERT_DOCUMENT";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Parameters.Add(new SqlParameter("Id", parameters.IdPdfBinary));
                    cmd.Parameters.Add(new SqlParameter("PdfBinary", parameters.PdfBinary1));
                    cmd.Parameters.Add(new SqlParameter("CreateUserid", parameters.CreateUserid));
                    cmd.Parameters.Add(new SqlParameter("IdCase", parameters.IdCase));
                    var Exec = (cmd.ExecuteScalar());
                }
            }
        }

        public void SetPdfMantanamEdit(PdfBinaryEntity parameters)
        {
            using (var db = new CurrencyVariationEntities())
            {
                using (var cmd = db.Database.Connection.CreateCommand())

                {
                    db.Database.Connection.Open();
                    cmd.CommandText = "SP_INSERT_DOCUMENT_EDIT";
                    cmd.CommandType = System.Data.CommandType.StoredProcedure; 
                    cmd.Parameters.Add(new SqlParameter("PdfBinary", parameters.PdfBinary1)); 
                    cmd.Parameters.Add(new SqlParameter("IdCase", parameters.IdCase));
                    var Exec = (cmd.ExecuteScalar());
                }
            }
        }

        public Generic VALIDATE_DATE_CURRENCY(DateTime date)
        {
            try
            {
                using (var dbo = new CurrencyVariationEntities())
                {
                    IEnumerable<Generic> RetornarValue = dbo.Database.SqlQuery<Generic>("EXEC SP_VALIDATE_DATE_CURRENCY @date",
                        new SqlParameter("@date", date)).ToList();
                    return RetornarValue.FirstOrDefault();
                }
            }
            catch (Exception ex)
            {
                throw;
            }
        }

    }
}


USE [POS_SITE]
GO
/****** Object:  StoredProcedure [POS].[SP_SET_DRIVERS]    Script Date: 1/24/2022 4:01:52 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROC [POS].[SP_SET_DRIVERS] 
        @Id	int = null,
		@QuotationId int = null,
		@YearsDriving int,
        @AccidentsLast3Years int,
        @UserId int
 AS
 declare
  @Modi_Date datetime

  declare
  @TableResult table (
    [Action] varchar(10),
	[Id]  int not null
  )

merge [POS].[DRIVERS] as tt
using (
	select   @Id,@QuotationId,@YearsDriving,@AccidentsLast3Years,@UserId,@Modi_Date
		   ) 
		as ts
			(
			 Id,QuotationId,YearsDriving,AccidentsLast3Years,UserId,Modi_Date
			)
	on  (
			tt.[Id] = ts.[Id] and
			tt.[QuotationId] = ts.[QuotationId]
		)
		when matched then
		update set 												
			tt.[QuotationId] = isnull(ts.[QuotationId],tt.[QuotationId]),
			tt.[YearsDriving] = isnull(ts.[YearsDriving],tt.[YearsDriving]),
			tt.[AccidentsLast3Years] = isnull(ts.[AccidentsLast3Years],tt.[AccidentsLast3Years]),
			tt.[UserId] = isnull(ts.UserId,tt.UserId),
			tt.[Modi_Date] = getdate()
	when not matched then
		insert (
				Id,			
				QuotationId,
				YearsDriving,
				AccidentsLast3Years,
				UserId,
				Modi_Date
				)
		values (
				ts.Id,	        
				ts.QuotationId,
				ts.YearsDriving,
				ts.AccidentsLast3Years,
				ts.UserId,				
				getdate()
		)

		output $action,isnull(deleted.Id,inserted.Id)	    
		into @TableResult;

		select * from  @TableResult




 public JsonResult SaveShipManten(ShipmentEntityViewModel objModel)
        {
            var objetoreal = new ShipmentEntity();

            dynamic showMessageString = string.Empty; 

            objetoreal.ShipUniqueID = objModel.shipmentEntity.ShipUniqueID == null ? 0 : objModel.shipmentEntity.ShipUniqueID;

            objetoreal.CarrierName = objModel.shipmentEntity.CarrierName;
            objetoreal.AccountNumber = objModel.shipmentEntity.AccountNumber;
            objetoreal.ShipmentNumber = objModel.shipmentEntity.ShipmentNumber;
            objetoreal.ShipmentDate = objModel.shipmentEntity.ShipmentDate;
            objetoreal.ShipmentWeight = 0;//objModel.shipmentEntity.ShipmentWeight;
            objetoreal.ShipmentQTY = objModel.shipmentEntity.ShipmentQTY == null ? 0 : objModel.shipmentEntity.ShipmentQTY;
            objetoreal.ShipPackageType = objModel.shipmentEntity.ShipPackageType;
            objetoreal.Operator = objModel.shipmentEntity.Operator;
            objetoreal.Sender = objModel.shipmentEntity.Sender;
            objetoreal.Receiver = objModel.shipmentEntity.Receiver;
            objetoreal.ReceiverAttn = objModel.shipmentEntity.ReceiverAttn;
            objetoreal.ReceiverAddress = objModel.shipmentEntity.ReceiverAddress;
            objetoreal.ReceiverCity = objModel.shipmentEntity.ReceiverCity;
            objetoreal.ReceiverState = objModel.shipmentEntity.ReceiverState;
            objetoreal.ReceiverZipCode = objModel.shipmentEntity.ReceiverZipCode;
            objetoreal.ReceiverCountry = objModel.shipmentEntity.ReceiverCountry;
            objetoreal.ReceiverPhoneNumber = objModel.shipmentEntity.ReceiverPhoneNumber;
            objetoreal.ShipmentComments = objModel.shipmentEntity.ShipmentComments;
            objetoreal.Transit = objModel.shipmentEntity.Transit;
            objetoreal.Incoming = objModel.shipmentEntity.Incoming;
            objetoreal.CommissionChecks = objModel.shipmentEntity.CommissionChecks;
            objetoreal.Materials = objModel.shipmentEntity.Materials;
            objetoreal.OtherContents = objModel.shipmentEntity.OtherContents;

            var resp = LogicManager.Set_Shimet_Logic(objetoreal);

            if (resp.Value == "INSERT" || resp.Value == "UPDATE")
            {
                showMessageString = new
                {
                    param1 = "Success",
                    param2 = "The Registry was successfully saved!",
                    param3 = resp.id,
                    param4 = resp.IdAlf,
                    param5 = resp.Value
                };

            }
            else if (!string.IsNullOrWhiteSpace(resp.ErrorMenssager))
            {
                showMessageString = new
                {
                    param1 = "Error",
                    param2 = "The Record was not saved successfully!",
                    param3 = resp.ErrorMenssager
                };
            }

            return Json(showMessageString, JsonRequestBehavior.AllowGet);

        }

 
